"""Init full migration

Revision ID: d51ad6c92c11
Revises: 
Create Date: 2023-11-26 17:38:16.857102

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd51ad6c92c11'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('GET', 'POST', 'PUT', 'PATCH', 'DELETE', name='apimethod').create(op.get_bind())
    sa.Enum('OPENAI_GPT3_5_TURBO_0613', 'OPENAI_GPT4_0613', 'ANTHROPIC_CLAUDE_2', 'META_LLAMA_70B', 'META_LLAMA_175B', name='llmoption').create(op.get_bind())
    sa.Enum('ReActAgent', 'PlanAndExecuteAgent', name='agenttype').create(op.get_bind())
    sa.Enum('api', 'query', 'expert_agent', name='actiontype').create(op.get_bind())
    op.create_table('account',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('subdomain', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id', 'uuid'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_account_first_name'), 'account', ['first_name'], unique=False)
    op.create_index(op.f('ix_account_id'), 'account', ['id'], unique=True)
    op.create_index(op.f('ix_account_last_name'), 'account', ['last_name'], unique=False)
    op.create_index(op.f('ix_account_subdomain'), 'account', ['subdomain'], unique=True)
    op.create_index(op.f('ix_account_uuid'), 'account', ['uuid'], unique=True)
    op.create_table('action_category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_action_category_id'), 'action_category', ['id'], unique=True)
    op.create_index(op.f('ix_action_category_name'), 'action_category', ['name'], unique=False)
    op.create_table('signup',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('company_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_signup_id'), 'signup', ['id'], unique=True)
    op.create_table('agent',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('snake_case_name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('instructions', sa.String(), nullable=True),
    sa.Column('slug', sa.String(), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('agent_type', postgresql.ENUM('ReActAgent', 'PlanAndExecuteAgent', name='agenttype', create_type=False), nullable=False),
    sa.Column('creator_id', sa.UUID(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('agent_config', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('llm_option', postgresql.ENUM('OPENAI_GPT3_5_TURBO_0613', 'OPENAI_GPT4_0613', 'ANTHROPIC_CLAUDE_2', 'META_LLAMA_70B', 'META_LLAMA_175B', name='llmoption', create_type=False), nullable=False),
    sa.Column('llm_api_key', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['creator_id'], ['account.uuid'], ),
    sa.PrimaryKeyConstraint('id', 'url')
    )
    op.create_index(op.f('ix_agent_id'), 'agent', ['id'], unique=True)
    op.create_index(op.f('ix_agent_name'), 'agent', ['name'], unique=False)
    op.create_index(op.f('ix_agent_url'), 'agent', ['url'], unique=True)
    op.create_table('api_action',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('snake_case_name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('followup_prompt', sa.String(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('is_user_confirmation_needed', sa.Boolean(), nullable=False),
    sa.Column('is_admin_approval_needed', sa.Boolean(), nullable=False),
    sa.Column('method', postgresql.ENUM('GET', 'POST', 'PUT', 'PATCH', 'DELETE', name='apimethod', create_type=False), nullable=True),
    sa.Column('template_url', sa.String(), nullable=True),
    sa.Column('headers', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('path_parameters', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('query_parameters', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('body', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('api_config', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('user_configurables', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('function_call_keys_to_paths', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('function_call_config', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('creator_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['creator_id'], ['account.uuid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_api_action_id'), 'api_action', ['id'], unique=False)
    op.create_index(op.f('ix_api_action_is_admin_approval_needed'), 'api_action', ['is_admin_approval_needed'], unique=False)
    op.create_index(op.f('ix_api_action_is_public'), 'api_action', ['is_public'], unique=False)
    op.create_index(op.f('ix_api_action_is_user_confirmation_needed'), 'api_action', ['is_user_confirmation_needed'], unique=False)
    op.create_index(op.f('ix_api_action_name'), 'api_action', ['name'], unique=False)
    op.create_table('auth',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('access_token', sa.String(), nullable=True),
    sa.Column('refresh_token', sa.String(), nullable=True),
    sa.Column('session_token', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('account_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_auth_access_token'), 'auth', ['access_token'], unique=False)
    op.create_index(op.f('ix_auth_id'), 'auth', ['id'], unique=False)
    op.create_index(op.f('ix_auth_session_token'), 'auth', ['session_token'], unique=False)
    op.create_table('agent_as_action_category_association',
    sa.Column('agent_id', sa.Integer(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agent.id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['action_category.id'], )
    )
    op.create_table('agent_network_association',
    sa.Column('client_agent_id', sa.Integer(), nullable=True),
    sa.Column('expert_agent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['client_agent_id'], ['agent.id'], ),
    sa.ForeignKeyConstraint(['expert_agent_id'], ['agent.id'], )
    )
    op.create_table('agent_schedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=True),
    sa.Column('creator_id', sa.UUID(), nullable=True),
    sa.Column('target_email', sa.String(), nullable=True),
    sa.Column('target_number', sa.String(), nullable=True),
    sa.Column('group_name', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('aws_schedule_arn', sa.String(), nullable=False),
    sa.Column('input_prompt', sa.String(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('schedule_expression', sa.String(), nullable=False),
    sa.Column('schedule_expression_timezone', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agent.id'], ),
    sa.ForeignKeyConstraint(['creator_id'], ['account.uuid'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('target_email'),
    sa.UniqueConstraint('target_number')
    )
    op.create_index(op.f('ix_agent_schedule_id'), 'agent_schedule', ['id'], unique=True)
    op.create_table('api_action_category_association',
    sa.Column('api_action_id', sa.Integer(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['api_action_id'], ['api_action.id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['action_category.id'], )
    )
    op.create_table('configured_action',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=True),
    sa.Column('action_type', postgresql.ENUM('api', 'query', 'expert_agent', name='actiontype', create_type=False), nullable=False),
    sa.Column('action_id', sa.Integer(), nullable=True),
    sa.Column('expert_agent_id', sa.Integer(), nullable=True),
    sa.Column('creator_id', sa.UUID(), nullable=True),
    sa.Column('user_configured_arguments', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('action_config', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('snake_case_name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['action_id'], ['api_action.id'], ),
    sa.ForeignKeyConstraint(['agent_id'], ['agent.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['creator_id'], ['account.uuid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['expert_agent_id'], ['agent.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_configured_action_action_id'), 'configured_action', ['action_id'], unique=False)
    op.create_index(op.f('ix_configured_action_agent_id'), 'configured_action', ['agent_id'], unique=False)
    op.create_index(op.f('ix_configured_action_expert_agent_id'), 'configured_action', ['expert_agent_id'], unique=False)
    op.create_index(op.f('ix_configured_action_id'), 'configured_action', ['id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_configured_action_id'), table_name='configured_action')
    op.drop_index(op.f('ix_configured_action_expert_agent_id'), table_name='configured_action')
    op.drop_index(op.f('ix_configured_action_agent_id'), table_name='configured_action')
    op.drop_index(op.f('ix_configured_action_action_id'), table_name='configured_action')
    op.drop_table('configured_action')
    op.drop_table('api_action_category_association')
    op.drop_index(op.f('ix_agent_schedule_id'), table_name='agent_schedule')
    op.drop_table('agent_schedule')
    op.drop_table('agent_network_association')
    op.drop_table('agent_as_action_category_association')
    op.drop_index(op.f('ix_auth_session_token'), table_name='auth')
    op.drop_index(op.f('ix_auth_id'), table_name='auth')
    op.drop_index(op.f('ix_auth_access_token'), table_name='auth')
    op.drop_table('auth')
    op.drop_index(op.f('ix_api_action_name'), table_name='api_action')
    op.drop_index(op.f('ix_api_action_is_user_confirmation_needed'), table_name='api_action')
    op.drop_index(op.f('ix_api_action_is_public'), table_name='api_action')
    op.drop_index(op.f('ix_api_action_is_admin_approval_needed'), table_name='api_action')
    op.drop_index(op.f('ix_api_action_id'), table_name='api_action')
    op.drop_table('api_action')
    op.drop_index(op.f('ix_agent_url'), table_name='agent')
    op.drop_index(op.f('ix_agent_name'), table_name='agent')
    op.drop_index(op.f('ix_agent_id'), table_name='agent')
    op.drop_table('agent')
    op.drop_index(op.f('ix_signup_id'), table_name='signup')
    op.drop_table('signup')
    op.drop_index(op.f('ix_action_category_name'), table_name='action_category')
    op.drop_index(op.f('ix_action_category_id'), table_name='action_category')
    op.drop_table('action_category')
    op.drop_index(op.f('ix_account_uuid'), table_name='account')
    op.drop_index(op.f('ix_account_subdomain'), table_name='account')
    op.drop_index(op.f('ix_account_last_name'), table_name='account')
    op.drop_index(op.f('ix_account_id'), table_name='account')
    op.drop_index(op.f('ix_account_first_name'), table_name='account')
    op.drop_table('account')
    sa.Enum('api', 'query', 'expert_agent', name='actiontype').drop(op.get_bind())
    sa.Enum('ReActAgent', 'PlanAndExecuteAgent', name='agenttype').drop(op.get_bind())
    sa.Enum('OPENAI_GPT3_5_TURBO_0613', 'OPENAI_GPT4_0613', 'ANTHROPIC_CLAUDE_2', 'META_LLAMA_70B', 'META_LLAMA_175B', name='llmoption').drop(op.get_bind())
    sa.Enum('GET', 'POST', 'PUT', 'PATCH', 'DELETE', name='apimethod').drop(op.get_bind())
    # ### end Alembic commands ###
